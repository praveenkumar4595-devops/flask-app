pipeline {
    agent any

    environment {
        DOCKER_USERNAME = 'praveenbudumuru'  // Replace with your DockerHub username
        IMAGE_NAME = 'flask-app'
    }

    stages {
        stage('1. Checkout Code') {
            steps {
                git branch: 'main', url: 'https://github.com/praveenkumar4595-devops/flask-app.git'
            }
        }

        stage('2. Build Docker Image') {
            steps {
                script {
                    def imageTag = "${DOCKER_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    sh "docker build -t ${imageTag} ."
                }
            }
        }

        stage('3. Push to Docker Hub') {
            steps {
                script {
                    def imageTag = "${DOCKER_USERNAME}/${IMAGE_NAME}:${BUILD_NUMBER}"
                    def latestTag = "${DOCKER_USERNAME}/${IMAGE_NAME}:latest"

                    // Ensure correct credentials usage
                    withCredentials([usernamePassword(credentialsId: 'hub_creds', usernameVariable: 'docker_user', passwordVariable: 'docker_pass')]) {
                        // Docker login securely without interpolation
                        sh """
                            echo \$docker_pass | docker login -u \$docker_user --password-stdin
                        """

                        // Tag and push the Docker image
                        sh "docker tag ${imageTag} ${latestTag}"
                        sh "docker push ${imageTag}"
                        sh "docker push ${latestTag}"
                    }
                }
            }
        }

        stage('4. Cleanup Docker Images') {
            steps {
                sh "docker image prune -af"
            }
        }

        stage('5. Deploy to Server') {
            steps {
                sshagent(['your-server-ssh-credentials-id']) {
                    sh '''
                    ssh -o StrictHostKeyChecking=no user@server-ip << EOF
                        docker pull praveenbudumuru/flask-app:latest
                        docker stop flask-container || true
                        docker rm flask-container || true
                        docker run -d --name flask-container -p 80:5000 praveenbudumuru/flask-app:latest
                    EOF
                    '''
                }
            }
        }
    }
}
